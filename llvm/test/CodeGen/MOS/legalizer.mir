# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck %s
---
name: zext
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: zext
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK: [[ZEXT:%[0-9]+]]:_(s8) = G_ZEXT [[COPY]](s1)
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[ZEXT]](s8), [[C]](s8)
    ; CHECK: [[MV1:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[C]](s8), [[C]](s8)
    ; CHECK: RTS implicit [[MV]](s16), implicit [[MV1]](s16)
    %0:_(s1) = COPY $c
    %1:_(s32) = G_ZEXT %0
    %2:_(s16), %3:_(s16) = G_UNMERGE_VALUES %1
    RTS implicit %2, implicit %3
...
---
name: shl_1_8bit
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_1_8bit
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK: [[SHLE:%[0-9]+]]:_(s8), [[SHLE1:%[0-9]+]]:_(s1) = G_SHLE [[COPY]], [[C]]
    ; CHECK: RTS implicit [[SHLE]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_SHL %0, %1
    RTS implicit %2
...
---
name: shl_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[COPY2:%[0-9]+]]:_(s8) = COPY $y
    ; CHECK: [[COPY3:%[0-9]+]]:_(s8) = COPY $rc0
    ; CHECK: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 1
    ; CHECK: [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 0
    ; CHECK: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK: [[SHLE:%[0-9]+]]:_(s8), [[SHLE1:%[0-9]+]]:_(s1) = G_SHLE [[COPY]], [[C2]]
    ; CHECK: [[SHLE2:%[0-9]+]]:_(s8), [[SHLE3:%[0-9]+]]:_(s1) = G_SHLE [[COPY1]], [[SHLE1]]
    ; CHECK: [[SHLE4:%[0-9]+]]:_(s8), [[SHLE5:%[0-9]+]]:_(s1) = G_SHLE [[COPY2]], [[SHLE3]]
    ; CHECK: [[SHLE6:%[0-9]+]]:_(s8), [[SHLE7:%[0-9]+]]:_(s1) = G_SHLE [[COPY3]], [[SHLE5]]
    ; CHECK: RTS implicit [[SHLE]](s8), implicit [[SHLE2]](s8), implicit [[SHLE4]](s8), implicit [[SHLE6]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8) = COPY $y
    %3:_(s8) = COPY $rc0
    %4:_(s32) = G_MERGE_VALUES %0, %1, %2, %3
    %5:_(s32) = G_CONSTANT i32 1
    %6:_(s32) = G_SHL %4, %5
    %7:_(s8), %8:_(s8), %9:_(s8), %10:_(s8) = G_UNMERGE_VALUES %6
    RTS implicit %7, implicit %8, implicit %9, implicit %10
...
---
name: shl_16
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_16
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[COPY2:%[0-9]+]]:_(s8) = COPY $y
    ; CHECK: [[COPY3:%[0-9]+]]:_(s8) = COPY $rc0
    ; CHECK: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 16
    ; CHECK: [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 0
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[C1]](s16)
    ; CHECK: RTS implicit [[UV]](s8), implicit [[UV1]](s8), implicit [[COPY]](s8), implicit [[COPY1]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8) = COPY $y
    %3:_(s8) = COPY $rc0
    %4:_(s32) = G_MERGE_VALUES %0, %1, %2, %3
    %5:_(s32) = G_CONSTANT i32 16
    %6:_(s32) = G_SHL %4, %5
    %7:_(s8), %8:_(s8), %9:_(s8), %10:_(s8) = G_UNMERGE_VALUES %6
    RTS implicit %7, implicit %8, implicit %9, implicit %10
...
---
name: shl_var
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: shl_var
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK: $a = COPY [[COPY]](s8)
    ; CHECK: $x = COPY [[COPY1]](s8)
    ; CHECK: JSR &__ashlqi3, mos_csr, implicit $a, implicit $x, implicit-def $a
    ; CHECK: [[COPY2:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK: RTS implicit [[COPY2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8) = G_SHL %0, %1
    RTS implicit %2
...
---
name: lshr_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: lshr_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 1
    ; CHECK: [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 0
    ; CHECK: [[C2:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY1]], [[C2]]
    ; CHECK: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[LSHRE1]]
    ; CHECK: RTS implicit [[LSHRE2]](s8), implicit [[LSHRE]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s16) = G_MERGE_VALUES %0, %1
    %3:_(s32) = G_CONSTANT i32 1
    %4:_(s16) = G_LSHR %2, %3
    %5:_(s8), %6:_(s8) = G_UNMERGE_VALUES %4
    RTS implicit %5, implicit %6
...
---
name: lshr_var
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: lshr_var
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK: $a = COPY [[COPY]](s8)
    ; CHECK: $x = COPY [[COPY1]](s8)
    ; CHECK: JSR &__lshrqi3, mos_csr, implicit $a, implicit $x, implicit-def $a
    ; CHECK: [[COPY2:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK: RTS implicit [[COPY2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8) = G_LSHR %0, %1
    RTS implicit %2
...
---
name: ashr_7
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ashr_7
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 7
    ; CHECK: ADJCALLSTACKDOWN 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK: $a = COPY [[COPY]](s8)
    ; CHECK: $x = COPY [[C]](s8)
    ; CHECK: JSR &__ashrqi3, mos_csr, implicit $a, implicit $x, implicit-def $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: ADJCALLSTACKUP 0, 0, implicit-def $rs0, implicit $rs0
    ; CHECK: RTS implicit [[COPY1]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 7
    %2:_(s8) = G_ASHR %0, %1
    RTS implicit %2
# Note: submsb == 5
...
---
name: rotl_7
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: rotl_7
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[DEF:%[0-9]+]]:_(s1) = G_IMPLICIT_DEF
    ; CHECK: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[DEF]]
    ; CHECK: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[LSHRE1]]
    ; CHECK: RTS implicit [[LSHRE2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 7
    %2:_(s8) = G_ROTL %0, %1
    RTS implicit %2
...
---
name: rotr_1
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: rotr_1
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[DEF:%[0-9]+]]:_(s1) = G_IMPLICIT_DEF
    ; CHECK: [[LSHRE:%[0-9]+]]:_(s8), [[LSHRE1:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[DEF]]
    ; CHECK: [[LSHRE2:%[0-9]+]]:_(s8), [[LSHRE3:%[0-9]+]]:_(s1) = G_LSHRE [[COPY]], [[LSHRE1]]
    ; CHECK: RTS implicit [[LSHRE2]](s8)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_ROTR %0, %1
    RTS implicit %2
...
---
name: icmp_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK: [[COPY1:%[0-9]+]]:_(p0) = COPY $rs3
    ; CHECK: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY]](p0)
    ; CHECK: [[PTRTOINT1:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT1]](s16)
    ; CHECK: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[UV]], [[UV2]]
    ; CHECK: [[XOR1:%[0-9]+]]:_(s8) = G_XOR [[UV1]], [[UV3]]
    ; CHECK: [[OR:%[0-9]+]]:_(s8) = G_OR [[XOR]], [[XOR1]]
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[OR]](s8), [[C]]
    ; CHECK: RTS implicit [[CMP3]](s1)
    %0:_(p0) = COPY $rs1
    %1:_(p0) = COPY $rs3
    %2:_(s1) = G_ICMP intpred(eq), %0, %1
    RTS implicit %2
...
---
name: icmp_eq
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_eq
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY]](s8), [[COPY1]]
    ; CHECK: RTS implicit [[CMP3]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(eq), %0, %1
    RTS implicit %2
...
---
name: icmp_ne
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ne
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY]](s8), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[CMP3]](s1), [[C1]], [[C]]
    ; CHECK: RTS implicit [[SELECT]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(ne), %0, %1
    RTS implicit %2
...
---
name: icmp_ugt
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ugt
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY1]](s8), [[COPY]]
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[CMP]](s1), [[C1]], [[C]]
    ; CHECK: RTS implicit [[SELECT]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(ugt), %0, %1
    RTS implicit %2
...
---
name: icmp_uge
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_uge
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY]](s8), [[COPY1]]
    ; CHECK: RTS implicit [[CMP]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(uge), %0, %1
    RTS implicit %2
...
---
name: icmp_ult
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ult
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY]](s8), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[CMP]](s1), [[C1]], [[C]]
    ; CHECK: RTS implicit [[SELECT]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(ult), %0, %1
    RTS implicit %2
...
---
name: icmp_ule
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_ule
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY1]](s8), [[COPY]]
    ; CHECK: RTS implicit [[CMP]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(ule), %0, %1
    RTS implicit %2
...
---
name: icmp_sgt
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_sgt
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY1]](s8), [[COPY]]
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s8) = G_ANYEXT [[CMP1]](s1)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s8) = G_ANYEXT [[CMP2]](s1)
    ; CHECK: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(sgt), %0, %1
    RTS implicit %2
...
---
name: icmp_sge
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_sge
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY]](s8), [[COPY1]]
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s8) = G_ANYEXT [[CMP1]](s1)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s8) = G_ANYEXT [[CMP2]](s1)
    ; CHECK: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[TRUNC]](s1), [[C1]], [[C]]
    ; CHECK: RTS implicit [[SELECT]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(sge), %0, %1
    RTS implicit %2
...
---
name: icmp_slt
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_slt
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY]](s8), [[COPY1]]
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s8) = G_ANYEXT [[CMP1]](s1)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s8) = G_ANYEXT [[CMP2]](s1)
    ; CHECK: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK: RTS implicit [[TRUNC]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(slt), %0, %1
    RTS implicit %2
...
---
name: icmp_slt_0
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_slt_0
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY]](s8), [[C]]
    ; CHECK: RTS implicit [[CMP1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = G_CONSTANT i8 0
    %2:_(s1) = G_ICMP intpred(slt), %0, %1
    RTS implicit %2
...
---
name: icmp_sle
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: icmp_sle
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY1]](s8), [[COPY]]
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s8) = G_ANYEXT [[CMP1]](s1)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s8) = G_ANYEXT [[CMP2]](s1)
    ; CHECK: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[XOR]](s8)
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK: [[SELECT:%[0-9]+]]:_(s1) = G_SELECT [[TRUNC]](s1), [[C1]], [[C]]
    ; CHECK: RTS implicit [[SELECT]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(sle), %0, %1
    RTS implicit %2
...
---
name: ptradd
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ptradd
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK: [[COPY1:%[0-9]+]]:_(s16) = COPY $rs1
    ; CHECK: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY]](p0)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s16)
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK: [[UADDE:%[0-9]+]]:_(s8), [[UADDE1:%[0-9]+]]:_(s1) = G_UADDE [[UV]], [[UV2]], [[C]]
    ; CHECK: [[UADDE2:%[0-9]+]]:_(s8), [[UADDE3:%[0-9]+]]:_(s1) = G_UADDE [[UV1]], [[UV3]], [[UADDE1]]
    ; CHECK: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[UADDE]](s8), [[UADDE2]](s8)
    ; CHECK: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK: RTS implicit [[INTTOPTR]](p0)
    %0:_(p0) = COPY $rs0
    %1:_(s16) = COPY $rs1
    %2:_(p0) = G_PTR_ADD %0, %1
    RTS implicit %2
...
---
name: ptradd_zext
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ptradd_zext
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[INDEX:%[0-9]+]]:_(p0) = G_INDEX [[COPY]], [[COPY1]](s8)
    ; CHECK: RTS implicit [[INDEX]](p0)
    %0:_(p0) = COPY $rs0
    %1:_(s8) = COPY $a
    %2:_(s16) = G_ZEXT %1
    %3:_(p0) = G_PTR_ADD %0, %2
    RTS implicit %3
...
---
name: ptradd_const8
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ptradd_const8
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK: [[INDEX:%[0-9]+]]:_(p0) = G_INDEX [[COPY]], [[C]](s8)
    ; CHECK: RTS implicit [[INDEX]](p0)
    %0:_(p0) = COPY $rs0
    %2:_(s16) = G_CONSTANT i16 255
    %3:_(p0) = G_PTR_ADD %0, %2
    RTS implicit %3
# Note: The -1 here is really an unsigned 255.
...
---
name: uaddo
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: uaddo
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 false
    ; CHECK: [[UADDE:%[0-9]+]]:_(s8), [[UADDE1:%[0-9]+]]:_(s1) = G_UADDE [[COPY]], [[COPY1]], [[C]]
    ; CHECK: RTS implicit [[UADDE]](s8), implicit [[UADDE1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8), %3:_(s1) = G_UADDO %0, %1
    RTS implicit %2, implicit %3
...
---
name: usubo
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: usubo
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[C:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK: [[USUBE:%[0-9]+]]:_(s8), [[USUBE1:%[0-9]+]]:_(s1) = G_USUBE [[COPY]], [[COPY1]], [[C]]
    ; CHECK: RTS implicit [[USUBE]](s8), implicit [[USUBE1]](s1)
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s8), %3:_(s1) = G_USUBO %0, %1
    RTS implicit %2, implicit %3
...
---
name: load_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK: [[LOAD:%[0-9]+]]:_(s8) = G_LOAD [[COPY]](p0) :: (load 1, align 2)
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK: [[INDEX:%[0-9]+]]:_(p0) = G_INDEX [[COPY]], [[C]](s8)
    ; CHECK: [[LOAD1:%[0-9]+]]:_(s8) = G_LOAD [[INDEX]](p0) :: (load 1 from unknown-address + 1)
    ; CHECK: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LOAD]](s8), [[LOAD1]](s8)
    ; CHECK: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK: RTS implicit [[INTTOPTR]](p0)
    %0:_(p0) = COPY $rs0
    %1:_(p0) = G_LOAD %0 :: (load 2)
    RTS implicit %1
...
---
name: store_ptr
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: store_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK: [[COPY1:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK: G_STORE [[UV]](s8), [[COPY]](p0) :: (store 1, align 2)
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK: [[INDEX:%[0-9]+]]:_(p0) = G_INDEX [[COPY]], [[C]](s8)
    ; CHECK: G_STORE [[UV1]](s8), [[INDEX]](p0) :: (store 1 into unknown-address + 1)
    ; CHECK: RTS
    %0:_(p0) = COPY $rs0
    %1:_(p0) = COPY $rs1
    G_STORE %1, %0 :: (store 2)
    RTS
...
---
name: brcond
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: brcond
    ; CHECK: successors: %bb.0(0x80000000)
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK: G_BRCOND_IMM [[COPY]](s1), %bb.0, 1
    %0:_(s1) = COPY $c
    G_BRCOND %0, %bb.0
...
---
name: brcond_not
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: brcond_not
    ; CHECK: successors: %bb.0(0x80000000)
    ; CHECK: [[COPY:%[0-9]+]]:_(s1) = COPY $c
    ; CHECK: G_BRCOND_IMM [[COPY]](s1), %bb.0, 0
    %0:_(s1) = COPY $c
    %1:_(s1) = G_CONSTANT i1 true
    %2:_(s1) = G_XOR %0, %1
    G_BRCOND %2, %bb.0
...
---
name: brcond_icmp_ne
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: brcond_icmp_ne
    ; CHECK: successors: %bb.0(0x80000000)
    ; CHECK: [[COPY:%[0-9]+]]:_(s8) = COPY $a
    ; CHECK: [[COPY1:%[0-9]+]]:_(s8) = COPY $x
    ; CHECK: [[CMP:%[0-9]+]]:_(s1), [[CMP1:%[0-9]+]]:_, [[CMP2:%[0-9]+]]:_, [[CMP3:%[0-9]+]]:_ = G_CMP [[COPY]](s8), [[COPY1]]
    ; CHECK: G_BRCOND_IMM [[CMP3]](s1), %bb.0, 0
    %0:_(s8) = COPY $a
    %1:_(s8) = COPY $x
    %2:_(s1) = G_ICMP intpred(ne), %0, %1
    G_BRCOND %2, %bb.0
...
---
name: vaarg
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: vaarg
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs1
    ; CHECK: [[LOAD:%[0-9]+]]:_(s8) = G_LOAD [[COPY]](p0) :: (invariant load 1)
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
    ; CHECK: [[INDEX:%[0-9]+]]:_(p0) = G_INDEX [[COPY]], [[C]](s8)
    ; CHECK: [[LOAD1:%[0-9]+]]:_(s8) = G_LOAD [[INDEX]](p0) :: (invariant load 1 from unknown-address + 1)
    ; CHECK: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LOAD]](s8), [[LOAD1]](s8)
    ; CHECK: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK: [[LOAD2:%[0-9]+]]:_(s8) = G_LOAD [[INTTOPTR]](p0) :: (invariant load 1)
    ; CHECK: [[INDEX1:%[0-9]+]]:_(p0) = G_INDEX [[INTTOPTR]], [[C]](s8)
    ; CHECK: [[LOAD3:%[0-9]+]]:_(s8) = G_LOAD [[INDEX1]](p0) :: (invariant load 1 from unknown-address + 1)
    ; CHECK: [[MV1:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[LOAD2]](s8), [[LOAD3]](s8)
    ; CHECK: [[INTTOPTR1:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV1]](s16)
    ; CHECK: [[C1:%[0-9]+]]:_(s8) = G_CONSTANT i8 2
    ; CHECK: [[INDEX2:%[0-9]+]]:_(p0) = G_INDEX [[INTTOPTR]], [[C1]](s8)
    ; CHECK: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[INDEX2]](p0)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK: G_STORE [[UV]](s8), [[COPY]](p0) :: (store 1)
    ; CHECK: [[INDEX3:%[0-9]+]]:_(p0) = G_INDEX [[COPY]], [[C]](s8)
    ; CHECK: G_STORE [[UV1]](s8), [[INDEX3]](p0) :: (store 1 into unknown-address + 1)
    ; CHECK: RTS implicit [[INTTOPTR1]](p0)
    %0:_(p0) = COPY $rs1
    %1:_(p0) = G_VAARG %0, 1
    RTS implicit %1
...
---
name: alloca
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: alloca
    ; CHECK: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 2
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $rs0
    ; CHECK: [[PTRTOINT:%[0-9]+]]:_(s16) = G_PTRTOINT [[COPY]](p0)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[PTRTOINT]](s16)
    ; CHECK: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[C]](s16)
    ; CHECK: [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
    ; CHECK: [[USUBE:%[0-9]+]]:_(s8), [[USUBE1:%[0-9]+]]:_(s1) = G_USUBE [[UV]], [[UV2]], [[C1]]
    ; CHECK: [[USUBE2:%[0-9]+]]:_(s8), [[USUBE3:%[0-9]+]]:_(s1) = G_USUBE [[UV1]], [[UV3]], [[USUBE1]]
    ; CHECK: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[USUBE]](s8), [[USUBE2]](s8)
    ; CHECK: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[MV]](s16)
    ; CHECK: $rs0 = COPY [[INTTOPTR]](p0)
    ; CHECK: [[COPY1:%[0-9]+]]:_(p0) = COPY [[INTTOPTR]](p0)
    ; CHECK: RTS implicit [[COPY1]](p0)
    %0:_(s16) = G_CONSTANT i16 2
    %1:_(p0) = G_DYN_STACKALLOC %0:_(s16), 1
    RTS implicit %1
...
