; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs < %s | FileCheck %s

target datalayout = "e-m:e-p:16:8-i16:8-i32:8-i64:8-f32:8-f64:8-a:8-Fi8-n8"
target triple = "mos"

define i16 @shl_1(i16 %a) {
; CHECK-LABEL: shl_1:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    asl
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    ldx mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = shl i16 %a, 1
  ret i16 %0
}
define i16 @shl_2(i16 %a) {
; CHECK-LABEL: shl_2:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    asl
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    asl
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    ldx mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = shl i16 %a, 2
  ret i16 %0
}
define i16 @shl_4(i16 %a) {
; CHECK-LABEL: shl_4:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    asl
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    asl
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    asl
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    asl
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    ldx mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = shl i16 %a, 4
  ret i16 %0
}
define i16 @shl_5(i16 %a) {
; CHECK-LABEL: shl_5:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc2)
; CHECK-NEXT:    stx mos8(__rc3)
; CHECK-NEXT:    lsr mos8(__rc3)
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    ror
; CHECK-NEXT:    lsr mos8(__rc3)
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    ror
; CHECK-NEXT:    lsr mos8(__rc3)
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    ror
; CHECK-NEXT:    ldx mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = shl i16 %a, 5
  ret i16 %0
}
define i16 @shl_7(i16 %a) {
; CHECK-LABEL: shl_7:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc2)
; CHECK-NEXT:    txa
; CHECK-NEXT:    lsr
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    ror
; CHECK-NEXT:    ldx mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = shl i16 %a, 7
  ret i16 %0
}
define i16 @shl_8(i16 %a) {
; CHECK-LABEL: shl_8:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    tax
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rts
entry:
  %0 = shl i16 %a, 8
  ret i16 %0
}
define i16 @shl_15(i16 %a) {
; CHECK-LABEL: shl_15:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    lsr
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    ror
; CHECK-NEXT:    tax
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    ror
; CHECK-NEXT:    rts
entry:
  %0 = shl i16 %a, 15
  ret i16 %0
}

define i16 @lshr_1(i16 %a) {
; CHECK-LABEL: lshr_1:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    lsr mos8(__rc2)
; CHECK-NEXT:    ror
; CHECK-NEXT:    ldx mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = lshr i16 %a, 1
  ret i16 %0
}
define i16 @lshr_2(i16 %a) {
; CHECK-LABEL: lshr_2:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    lsr mos8(__rc2)
; CHECK-NEXT:    ror
; CHECK-NEXT:    lsr mos8(__rc2)
; CHECK-NEXT:    ror
; CHECK-NEXT:    ldx mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = lshr i16 %a, 2
  ret i16 %0
}
define i16 @lshr_4(i16 %a) {
; CHECK-LABEL: lshr_4:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    lsr mos8(__rc2)
; CHECK-NEXT:    ror
; CHECK-NEXT:    lsr mos8(__rc2)
; CHECK-NEXT:    ror
; CHECK-NEXT:    lsr mos8(__rc2)
; CHECK-NEXT:    ror
; CHECK-NEXT:    lsr mos8(__rc2)
; CHECK-NEXT:    ror
; CHECK-NEXT:    ldx mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = lshr i16 %a, 4
  ret i16 %0
}
define i16 @lshr_5(i16 %a) {
; CHECK-LABEL: lshr_5:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc3)
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    asl mos8(__rc3)
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rol
; CHECK-NEXT:    asl mos8(__rc3)
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    rol
; CHECK-NEXT:    asl mos8(__rc3)
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    rol
; CHECK-NEXT:    tax
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = lshr i16 %a, 5
  ret i16 %0
}
define i16 @lshr_7(i16 %a) {
; CHECK-LABEL: lshr_7:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    asl
; CHECK-NEXT:    rol mos8(__rc2)
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rol
; CHECK-NEXT:    tax
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = lshr i16 %a, 7
  ret i16 %0
}
define i16 @lshr_8(i16 %a) {
; CHECK-LABEL: lshr_8:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    txa
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    rts
entry:
  %0 = lshr i16 %a, 8
  ret i16 %0
}
define i16 @lshr_15(i16 %a) {
; CHECK-LABEL: lshr_15:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    txa
; CHECK-NEXT:    asl
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rol
; CHECK-NEXT:    tay
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    rol
; CHECK-NEXT:    tax
; CHECK-NEXT:    tya
; CHECK-NEXT:    rts
entry:
  %0 = lshr i16 %a, 15
  ret i16 %0
}

define i16 @ashr_1(i16 %a) {
; CHECK-LABEL: ashr_1:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc2)
; CHECK-NEXT:    txa
; CHECK-NEXT:    cpx #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    tax
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = ashr i16 %a, 1
  ret i16 %0
}
define i16 @ashr_2(i16 %a) {
; CHECK-LABEL: ashr_2:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc2)
; CHECK-NEXT:    txa
; CHECK-NEXT:    cpx #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    tax
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = ashr i16 %a, 2
  ret i16 %0
}
define i16 @ashr_4(i16 %a) {
; CHECK-LABEL: ashr_4:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc2)
; CHECK-NEXT:    txa
; CHECK-NEXT:    cpx #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    tax
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = ashr i16 %a, 4
  ret i16 %0
}
define i16 @ashr_5(i16 %a) {
; CHECK-LABEL: ashr_5:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc2)
; CHECK-NEXT:    txa
; CHECK-NEXT:    cpx #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    tax
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = ashr i16 %a, 5
  ret i16 %0
}
define i16 @ashr_7(i16 %a) {
; CHECK-LABEL: ashr_7:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc2)
; CHECK-NEXT:    txa
; CHECK-NEXT:    cpx #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    tax
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = ashr i16 %a, 7
  ret i16 %0
}
define i16 @ashr_8(i16 %a) {
; CHECK-LABEL: ashr_8:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    txa
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bpl .LBB19_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldx #-1
; CHECK-NEXT:    rts
; CHECK-NEXT:  .LBB19_2: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    rts
entry:
  %0 = ashr i16 %a, 8
  ret i16 %0
}
define i16 @ashr_15(i16 %a) {
; CHECK-LABEL: ashr_15:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bpl .LBB20_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    lda #-1
; CHECK-NEXT:    jmp .LBB20_3
; CHECK-NEXT:  .LBB20_2: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB20_3: ; %entry
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    cmp #128
; CHECK-NEXT:    ror
; CHECK-NEXT:    ror mos8(__rc2)
; CHECK-NEXT:    tax
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    rts
entry:
  %0 = ashr i16 %a, 15
  ret i16 %0
}
define i32 @ashr_16(i32 %a) {
; CHECK-LABEL: ashr_16:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    ldx mos8(__rc3)
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bpl .LBB21_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldy #-1
; CHECK-NEXT:    jmp .LBB21_3
; CHECK-NEXT:  .LBB21_2: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:  .LBB21_3: ; %entry
; CHECK-NEXT:    sty mos8(__rc2)
; CHECK-NEXT:    sty mos8(__rc3)
; CHECK-NEXT:    rts
entry:
  %0 = ashr i32 %a, 16
  ret i32 %0
}
