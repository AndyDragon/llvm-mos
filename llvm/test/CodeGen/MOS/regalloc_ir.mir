# RUN: llc -mtriple=mos -run-pass=greedy -verify-machineinstrs -o - %s | FileCheck %s
--- |
  define void @spill_static_gpr() norecurse {
    entry:
      ret void
  }
  define void @spill_static_Imag8() norecurse {
    entry:
      ret void
  }
  define void @spill_static_imag16() norecurse {
    entry:
      ret void
  }
---
---
name: spill_static_gpr
# CHECK-LABEL: name: spill_static_gpr
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $a
    %0:gpr = COPY $a
    JSR &fn, mos_csr
    $a = COPY %0
    RTS implicit $a
# CHECK:      BUNDLE implicit-def dead %1, implicit $a {
# CHECK-NEXT:   %1:gpr = COPY $a
# CHECK-NEXT:   STabs_offset internal %1, %stack.0, 0 :: (store 1 into %stack.0)
# CHECK-NEXT: }
# CHECK-NEXT: JSR
# CHECK-NEXT: BUNDLE implicit-def dead %2, implicit-def $nz, implicit-def $n, implicit-def $z, implicit-def $a, implicit-def $alsb, implicit-def $amsb {
# CHECK-NEXT:   %2:gpr = LDabs_offset %stack.0, 0, implicit-def $nz :: (load 1 from %stack.0)
# CHECK-NEXT:   $a = COPY internal %2
# CHECK-NEXT: }
# CHECK-NEXT: RTS
...
---
name: spill_static_Imag8
# CHECK-LABEL: name: spill_static_Imag8
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $rc2, $rs2, $rs4
    %0:imag8 = COPY $rc2
    JSR &fn, mos_csr
    $rc2 = COPY %0
    RTS implicit $rc2, implicit $rs2, implicit $rs4
# CHECK:      BUNDLE implicit-def dead %1, implicit $rc2 {
# CHECK-NEXT:   %1:gpr = COPY $rc2
# CHECK-NEXT:   STabs_offset internal %1, %stack.0, 0 :: (store 1 into %stack.0)
# CHECK-NEXT: }
# CHECK-NEXT: JSR
# CHECK-NEXT: BUNDLE implicit-def dead %2, implicit-def $nz, implicit-def $n, implicit-def $z, implicit-def $rc2, implicit-def $rc2lsb, implicit-def $rc2msb {
# CHECK-NEXT:   %2:gpr = LDabs_offset %stack.0, 0, implicit-def $nz :: (load 1 from %stack.0)
# CHECK-NEXT:   $rc2 = COPY internal %2
# CHECK-NEXT: }
# CHECK-NEXT: RTS
...
---
name: spill_static_imag16
# CHECK-LABEL: name: spill_static_imag16
legalized: true
regBankSelected: true
tracksRegLiveness: true
body: |
  bb.0.entry:
    liveins: $rs1, $rs2, $rs4
    %0:imag16 = COPY $rs1
    JSR &fn, mos_csr
    $rs1 = COPY %0
    RTS implicit $rs1, implicit $rs2, implicit $rs4
# CHECK:      BUNDLE implicit-def dead %1, implicit-def dead %2, implicit $rc2, implicit $rc3 {
# CHECK-NEXT:   %1:gpr = COPY $rc2
# CHECK-NEXT:   STabs_offset internal %1, %stack.0, 0 :: (store 1 into %stack.0)
# CHECK-NEXT:   %2:gpr = COPY $rc3
# CHECK-NEXT:   STabs_offset internal %2, %stack.0, 1 :: (store 1 into %stack.0 + 1)
# CHECK-NEXT: }
# CHECK-NEXT: JSR
# CHECK-NEXT: BUNDLE implicit-def dead %3, implicit-def $nz, implicit-def $n, implicit-def $z, implicit-def $rc2, implicit-def $rc2lsb, implicit-def $rc2msb, implicit-def dead %4, implicit-def $rc3, implicit-def $rc3lsb, implicit-def $rc3msb, implicit-def $rs1 {
# CHECK-NEXT:   %3:gpr = LDabs_offset %stack.0, 0, implicit-def $nz :: (load 1 from %stack.0)
# CHECK-NEXT:   $rc2 = COPY internal %3
# CHECK-NEXT:   %4:gpr = LDabs_offset %stack.0, 1, implicit-def $nz :: (load 1 from %stack.0 + 1)
# CHECK-NEXT:   $rc3 = COPY internal %4
# CHECK-NEXT:   $rs1 = KILL internal $rc2, internal $rc3
# CHECK-NEXT: }
# CHECK-NEXT: RTS
...
