; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -O2 --filetype=asm -zp-avail=9 < %s | FileCheck %s

target datalayout = "e-m:e-p:16:8-i16:8-i32:8-i64:8-f32:8-f64:8-a:8-Fi8-n8"
target triple = "mos-sim"

@global = global i8 0, align 1
@global_noinit = global i8 undef, align 1

define i64 @foo(i64 %live_across_call) norecurse {
; CHECK-LABEL: foo:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(.Lfoo_zp_stk) ; 1-byte Folded Spill
; CHECK-NEXT:    stx mos8(.Lfoo_zp_stk+1) ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc2)
; CHECK-NEXT:    stx mos8(.Lfoo_zp_stk+2) ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc3)
; CHECK-NEXT:    stx mos8(.Lfoo_zp_stk+3) ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc4)
; CHECK-NEXT:    stx mos8(.Lfoo_zp_stk+4) ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc5)
; CHECK-NEXT:    stx mos8(.Lfoo_zp_stk+5) ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc6)
; CHECK-NEXT:    stx mos8(.Lfoo_zp_stk+6) ; 1-byte Folded Spill
; CHECK-NEXT:    ldx mos8(__rc7)
; CHECK-NEXT:    stx mos8(.Lfoo_zp_stk+7) ; 1-byte Folded Spill
; CHECK-NEXT:    ldx global
; CHECK-NEXT:    stx mos8(global_noinit)
; CHECK-NEXT:    jsr bar
; CHECK-NEXT:    ldx mos8(.Lfoo_zp_stk+2) ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    ldx mos8(.Lfoo_zp_stk+3) ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc3)
; CHECK-NEXT:    ldx mos8(.Lfoo_zp_stk+4) ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc4)
; CHECK-NEXT:    ldx mos8(.Lfoo_zp_stk+5) ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc5)
; CHECK-NEXT:    ldx mos8(.Lfoo_zp_stk+6) ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc6)
; CHECK-NEXT:    ldx mos8(.Lfoo_zp_stk+7) ; 1-byte Folded Reload
; CHECK-NEXT:    stx mos8(__rc7)
; CHECK-NEXT:    ldx mos8(.Lfoo_zp_stk+1) ; 1-byte Folded Reload
; CHECK-NEXT:    lda mos8(.Lfoo_zp_stk) ; 1-byte Folded Reload
; CHECK-NEXT:    rts
entry:
  %0 = load i8, ptr @global, align 1
  store i8 %0, ptr @global_noinit, align 1
  call void @bar()
  ret i64 %live_across_call
}

define void @bar() norecurse noinline {
; CHECK-LABEL: bar:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    rts
entry:
  ret void
}

declare void @ext() nocallback

define void @csr() norecurse {
; CHECK-LABEL: csr:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    ldx #57
; CHECK-NEXT:    ldy #48
; CHECK-NEXT:    stx mos8(.Lcsr_zp_stk)
; CHECK-NEXT:    sty mos8(.Lcsr_zp_stk+1)
; CHECK-NEXT:  .LBB2_1: ; %for.body
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    jsr ext
; CHECK-NEXT:    ldx mos8(.Lcsr_zp_stk)
; CHECK-NEXT:    dec mos8(.Lcsr_zp_stk)
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    beq .LBB2_4
; CHECK-NEXT:  ; %bb.2: ; %for.body
; CHECK-NEXT:    ; in Loop: Header=BB2_1 Depth=1
; CHECK-NEXT:    lda mos8(.Lcsr_zp_stk+1)
; CHECK-NEXT:    bne .LBB2_1
; CHECK-NEXT:  .LBB2_3: ; %for.body
; CHECK-NEXT:    ; in Loop: Header=BB2_1 Depth=1
; CHECK-NEXT:    lda mos8(.Lcsr_zp_stk)
; CHECK-NEXT:    bne .LBB2_1
; CHECK-NEXT:    jmp .LBB2_5
; CHECK-NEXT:  .LBB2_4: ; %for.body
; CHECK-NEXT:    ; in Loop: Header=BB2_1 Depth=1
; CHECK-NEXT:    dec mos8(.Lcsr_zp_stk+1)
; CHECK-NEXT:    lda mos8(.Lcsr_zp_stk+1)
; CHECK-NEXT:    bne .LBB2_1
; CHECK-NEXT:    jmp .LBB2_3
; CHECK-NEXT:  .LBB2_5: ; %for.cond.cleanup
; CHECK-NEXT:    rts
entry:
  br label %for.body

for.cond.cleanup:
  ret void

for.body:
  %i = phi i16 [ 0, %entry ], [ %inc1, %for.body ]
  tail call void @ext()
  %inc1 = add i16 %i, 1
  %exitcond.not = icmp eq i16 %inc1, 12345
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

declare void @ext_ptr(ptr %p) nocallback

define void @alloca() norecurse noinline {
; CHECK-LABEL: alloca:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    ldx #mos16lo(.Lalloca_zp_stk)
; CHECK-NEXT:    ldy #mos16hi(.Lalloca_zp_stk)
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    sty mos8(__rc3)
; CHECK-NEXT:    jmp ext_ptr
entry:
  %0 = alloca i8
  call void @ext_ptr(ptr %0)
  ret void
}

; CHECK-LABEL: .type global,@object
; CHECK-NEXT:  .bss
; CHECK-LABEL: .type global_noinit,@object
; CHECK-NEXT:  .zp.noinit
