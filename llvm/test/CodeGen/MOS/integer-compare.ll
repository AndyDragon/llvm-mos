; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s | FileCheck %s

target datalayout = "e-p:16:8-i16:8-i32:8-i64:8-f32:8-f64:8-a:8-Fi8-n8"
target triple = "mos"

define zeroext i1 @eq(i16 %a, i16 %b) {
; CHECK-LABEL: eq:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc4)
; CHECK-NEXT:    txa
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc3)
; CHECK-NEXT:    beq .LBB0_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:    jmp .LBB0_3
; CHECK-NEXT:  .LBB0_2: ; %entry
; CHECK-NEXT:    ldy #1
; CHECK-NEXT:  .LBB0_3: ; %entry
; CHECK-NEXT:    sec
; CHECK-NEXT:    lda mos8(__rc4)
; CHECK-NEXT:    sbc mos8(__rc2)
; CHECK-NEXT:    beq .LBB0_5
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    beq .LBB0_6
; CHECK-NEXT:    jmp .LBB0_7
; CHECK-NEXT:  .LBB0_5: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    bne .LBB0_7
; CHECK-NEXT:  .LBB0_6: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:  .LBB0_7: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bne .LBB0_9
; CHECK-NEXT:  ; %bb.8: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB0_9: ; %entry
; CHECK-NEXT:    rts
entry:
  %cmp = icmp eq i16 %a, %b
  ret i1 %cmp
}

define zeroext i1 @ne(i16 %a, i16 %b) {
; CHECK-LABEL: ne:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc4)
; CHECK-NEXT:    txa
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc3)
; CHECK-NEXT:    beq .LBB1_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:    jmp .LBB1_3
; CHECK-NEXT:  .LBB1_2: ; %entry
; CHECK-NEXT:    ldy #1
; CHECK-NEXT:  .LBB1_3: ; %entry
; CHECK-NEXT:    sec
; CHECK-NEXT:    lda mos8(__rc4)
; CHECK-NEXT:    sbc mos8(__rc2)
; CHECK-NEXT:    beq .LBB1_5
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    beq .LBB1_6
; CHECK-NEXT:    jmp .LBB1_7
; CHECK-NEXT:  .LBB1_5: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    bne .LBB1_7
; CHECK-NEXT:  .LBB1_6: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:  .LBB1_7: ; %entry
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    beq .LBB1_9
; CHECK-NEXT:  ; %bb.8: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    jmp .LBB1_10
; CHECK-NEXT:  .LBB1_9: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:  .LBB1_10: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bne .LBB1_12
; CHECK-NEXT:  ; %bb.11: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB1_12: ; %entry
; CHECK-NEXT:    rts
entry:
  %cmp = icmp ne i16 %a, %b
  ret i1 %cmp
}

define zeroext i1 @ule(i16 %a, i16 %b) {
; CHECK-LABEL: ule:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc5)
; CHECK-NEXT:    stx mos8(__rc4)
; CHECK-NEXT:    lda mos8(__rc3)
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc4)
; CHECK-NEXT:    beq .LBB2_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:    jmp .LBB2_3
; CHECK-NEXT:  .LBB2_2: ; %entry
; CHECK-NEXT:    ldy #1
; CHECK-NEXT:  .LBB2_3: ; %entry
; CHECK-NEXT:    sec
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    sbc mos8(__rc5)
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    bcs .LBB2_5
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:  .LBB2_5: ; %entry
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    bne .LBB2_9
; CHECK-NEXT:  ; %bb.6: ; %entry
; CHECK-NEXT:    lda mos8(__rc6)
; CHECK-NEXT:    pha
; CHECK-NEXT:    lda mos8(__rc3)
; CHECK-NEXT:    sta mos8(__rc6)
; CHECK-NEXT:    lda mos8(__rc3)
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc4)
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    bcs .LBB2_8
; CHECK-NEXT:  ; %bb.7: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:  .LBB2_8: ; %entry
; CHECK-NEXT:    pla
; CHECK-NEXT:    sta mos8(__rc6)
; CHECK-NEXT:  .LBB2_9: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bne .LBB2_11
; CHECK-NEXT:  ; %bb.10: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB2_11: ; %entry
; CHECK-NEXT:    rts
entry:
  %cmp = icmp ule i16 %a, %b
  ret i1 %cmp
}

define zeroext i1 @ult(i16 %a, i16 %b) {
; CHECK-LABEL: ult:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc4)
; CHECK-NEXT:    txa
; CHECK-NEXT:    sec
; CHECK-NEXT:    pha
; CHECK-NEXT:    txa
; CHECK-NEXT:    tay
; CHECK-NEXT:    pla
; CHECK-NEXT:    sbc mos8(__rc3)
; CHECK-NEXT:    beq .LBB3_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    jmp .LBB3_3
; CHECK-NEXT:  .LBB3_2: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:  .LBB3_3: ; %entry
; CHECK-NEXT:    sec
; CHECK-NEXT:    lda mos8(__rc4)
; CHECK-NEXT:    sbc mos8(__rc2)
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    bcs .LBB3_5
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB3_5: ; %entry
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bne .LBB3_8
; CHECK-NEXT:  ; %bb.6: ; %entry
; CHECK-NEXT:    tya
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc3)
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    bcs .LBB3_8
; CHECK-NEXT:  ; %bb.7: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB3_8: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    bne .LBB3_10
; CHECK-NEXT:  ; %bb.9: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:  .LBB3_10: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bne .LBB3_12
; CHECK-NEXT:  ; %bb.11: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB3_12: ; %entry
; CHECK-NEXT:    rts
entry:
  %cmp = icmp ult i16 %a, %b
  ret i1 %cmp
}

define zeroext i1 @uge(i16 %a, i16 %b) {
; CHECK-LABEL: uge:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc5)
; CHECK-NEXT:    txa
; CHECK-NEXT:    sec
; CHECK-NEXT:    stx mos8(__rc4)
; CHECK-NEXT:    sbc mos8(__rc3)
; CHECK-NEXT:    beq .LBB4_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:    jmp .LBB4_3
; CHECK-NEXT:  .LBB4_2: ; %entry
; CHECK-NEXT:    ldy #1
; CHECK-NEXT:  .LBB4_3: ; %entry
; CHECK-NEXT:    sec
; CHECK-NEXT:    lda mos8(__rc5)
; CHECK-NEXT:    sbc mos8(__rc2)
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    bcs .LBB4_5
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:  .LBB4_5: ; %entry
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    bne .LBB4_8
; CHECK-NEXT:  ; %bb.6: ; %entry
; CHECK-NEXT:    lda mos8(__rc4)
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc3)
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    bcs .LBB4_8
; CHECK-NEXT:  ; %bb.7: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:  .LBB4_8: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bne .LBB4_10
; CHECK-NEXT:  ; %bb.9: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB4_10: ; %entry
; CHECK-NEXT:    rts
entry:
  %cmp = icmp uge i16 %a, %b
  ret i1 %cmp
}

define zeroext i1 @ugt(i16 %a, i16 %b) {
; CHECK-LABEL: ugt:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc5)
; CHECK-NEXT:    stx mos8(__rc4)
; CHECK-NEXT:    lda mos8(__rc3)
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc4)
; CHECK-NEXT:    beq .LBB5_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    jmp .LBB5_3
; CHECK-NEXT:  .LBB5_2: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:  .LBB5_3: ; %entry
; CHECK-NEXT:    sec
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    sbc mos8(__rc5)
; CHECK-NEXT:    ldy #1
; CHECK-NEXT:    bcs .LBB5_5
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:  .LBB5_5: ; %entry
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bne .LBB5_9
; CHECK-NEXT:  ; %bb.6: ; %entry
; CHECK-NEXT:    lda mos8(__rc6)
; CHECK-NEXT:    pha
; CHECK-NEXT:    lda mos8(__rc3)
; CHECK-NEXT:    sta mos8(__rc6)
; CHECK-NEXT:    lda mos8(__rc3)
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc4)
; CHECK-NEXT:    ldy #1
; CHECK-NEXT:    bcs .LBB5_8
; CHECK-NEXT:  ; %bb.7: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:  .LBB5_8: ; %entry
; CHECK-NEXT:    pla
; CHECK-NEXT:    sta mos8(__rc6)
; CHECK-NEXT:  .LBB5_9: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    bne .LBB5_11
; CHECK-NEXT:  ; %bb.10: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:  .LBB5_11: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bne .LBB5_13
; CHECK-NEXT:  ; %bb.12: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB5_13: ; %entry
; CHECK-NEXT:    rts
entry:
  %cmp = icmp ugt i16 %a, %b
  ret i1 %cmp
}

define zeroext i1 @sle(i16 %a, i16 %b) {
; CHECK-LABEL: sle:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc4)
; CHECK-NEXT:    stx mos8(__rc5)
; CHECK-NEXT:    sec
; CHECK-NEXT:    lda mos8(__rc3)
; CHECK-NEXT:    sbc mos8(__rc5)
; CHECK-NEXT:    beq .LBB6_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:    jmp .LBB6_3
; CHECK-NEXT:  .LBB6_2: ; %entry
; CHECK-NEXT:    ldy #1
; CHECK-NEXT:  .LBB6_3: ; %entry
; CHECK-NEXT:    sec
; CHECK-NEXT:    lda mos8(__rc3)
; CHECK-NEXT:    sbc mos8(__rc5)
; CHECK-NEXT:    bmi .LBB6_8
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    bne .LBB6_9
; CHECK-NEXT:  .LBB6_5: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    bvs .LBB6_7
; CHECK-NEXT:  ; %bb.6: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB6_7: ; %entry
; CHECK-NEXT:    eor mos8(__rc2)
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    beq .LBB6_13
; CHECK-NEXT:    jmp .LBB6_15
; CHECK-NEXT:  .LBB6_8: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    beq .LBB6_5
; CHECK-NEXT:  .LBB6_9: ; %entry
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc4)
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    bcs .LBB6_11
; CHECK-NEXT:  ; %bb.10: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB6_11: ; %entry
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    beq .LBB6_14
; CHECK-NEXT:  ; %bb.12: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    bne .LBB6_15
; CHECK-NEXT:  .LBB6_13: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    jmp .LBB6_16
; CHECK-NEXT:  .LBB6_14: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    beq .LBB6_13
; CHECK-NEXT:  .LBB6_15: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:  .LBB6_16: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bne .LBB6_18
; CHECK-NEXT:  ; %bb.17: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB6_18: ; %entry
; CHECK-NEXT:    rts
entry:
  %cmp = icmp sle i16 %a, %b
  ret i1 %cmp
}

define zeroext i1 @slt(i16 %a, i16 %b) {
; CHECK-LABEL: slt:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc4)
; CHECK-NEXT:    sec
; CHECK-NEXT:    txa
; CHECK-NEXT:    sbc mos8(__rc3)
; CHECK-NEXT:    beq .LBB7_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:    jmp .LBB7_3
; CHECK-NEXT:  .LBB7_2: ; %entry
; CHECK-NEXT:    ldy #1
; CHECK-NEXT:  .LBB7_3: ; %entry
; CHECK-NEXT:    sec
; CHECK-NEXT:    txa
; CHECK-NEXT:    sbc mos8(__rc3)
; CHECK-NEXT:    bmi .LBB7_8
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    bne .LBB7_9
; CHECK-NEXT:  .LBB7_5: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    bvs .LBB7_7
; CHECK-NEXT:  ; %bb.6: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB7_7: ; %entry
; CHECK-NEXT:    eor mos8(__rc2)
; CHECK-NEXT:    jmp .LBB7_14
; CHECK-NEXT:  .LBB7_8: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    beq .LBB7_5
; CHECK-NEXT:  .LBB7_9: ; %entry
; CHECK-NEXT:    lda mos8(__rc4)
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc2)
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    bcs .LBB7_11
; CHECK-NEXT:  ; %bb.10: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB7_11: ; %entry
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    beq .LBB7_13
; CHECK-NEXT:  ; %bb.12: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    jmp .LBB7_14
; CHECK-NEXT:  .LBB7_13: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:  .LBB7_14: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    bne .LBB7_16
; CHECK-NEXT:  ; %bb.15: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:  .LBB7_16: ; %entry
; CHECK-NEXT:    txa
; CHECK-NEXT:    rts
entry:
  %cmp = icmp slt i16 %a, %b
  ret i1 %cmp
}

define zeroext i1 @sge(i16 %a, i16 %b) {
; CHECK-LABEL: sge:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc4)
; CHECK-NEXT:    sec
; CHECK-NEXT:    txa
; CHECK-NEXT:    sbc mos8(__rc3)
; CHECK-NEXT:    beq .LBB8_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:    jmp .LBB8_3
; CHECK-NEXT:  .LBB8_2: ; %entry
; CHECK-NEXT:    ldy #1
; CHECK-NEXT:  .LBB8_3: ; %entry
; CHECK-NEXT:    sec
; CHECK-NEXT:    txa
; CHECK-NEXT:    sbc mos8(__rc3)
; CHECK-NEXT:    bmi .LBB8_8
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    bne .LBB8_9
; CHECK-NEXT:  .LBB8_5: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    bvs .LBB8_7
; CHECK-NEXT:  ; %bb.6: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB8_7: ; %entry
; CHECK-NEXT:    eor mos8(__rc2)
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    beq .LBB8_13
; CHECK-NEXT:    jmp .LBB8_15
; CHECK-NEXT:  .LBB8_8: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    beq .LBB8_5
; CHECK-NEXT:  .LBB8_9: ; %entry
; CHECK-NEXT:    lda mos8(__rc4)
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc2)
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    bcs .LBB8_11
; CHECK-NEXT:  ; %bb.10: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB8_11: ; %entry
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    beq .LBB8_14
; CHECK-NEXT:  ; %bb.12: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    bne .LBB8_15
; CHECK-NEXT:  .LBB8_13: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    jmp .LBB8_16
; CHECK-NEXT:  .LBB8_14: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    beq .LBB8_13
; CHECK-NEXT:  .LBB8_15: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:  .LBB8_16: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    cpx #0
; CHECK-NEXT:    bne .LBB8_18
; CHECK-NEXT:  ; %bb.17: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB8_18: ; %entry
; CHECK-NEXT:    rts
entry:
  %cmp = icmp sge i16 %a, %b
  ret i1 %cmp
}

define zeroext i1 @sgt(i16 %a, i16 %b) {
; CHECK-LABEL: sgt:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sta mos8(__rc4)
; CHECK-NEXT:    stx mos8(__rc5)
; CHECK-NEXT:    sec
; CHECK-NEXT:    lda mos8(__rc3)
; CHECK-NEXT:    sbc mos8(__rc5)
; CHECK-NEXT:    beq .LBB9_2
; CHECK-NEXT:  ; %bb.1: ; %entry
; CHECK-NEXT:    ldy #0
; CHECK-NEXT:    jmp .LBB9_3
; CHECK-NEXT:  .LBB9_2: ; %entry
; CHECK-NEXT:    ldy #1
; CHECK-NEXT:  .LBB9_3: ; %entry
; CHECK-NEXT:    sec
; CHECK-NEXT:    lda mos8(__rc3)
; CHECK-NEXT:    sbc mos8(__rc5)
; CHECK-NEXT:    bmi .LBB9_8
; CHECK-NEXT:  ; %bb.4: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    bne .LBB9_9
; CHECK-NEXT:  .LBB9_5: ; %entry
; CHECK-NEXT:    stx mos8(__rc2)
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    bvs .LBB9_7
; CHECK-NEXT:  ; %bb.6: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB9_7: ; %entry
; CHECK-NEXT:    eor mos8(__rc2)
; CHECK-NEXT:    jmp .LBB9_14
; CHECK-NEXT:  .LBB9_8: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    cpy #0
; CHECK-NEXT:    beq .LBB9_5
; CHECK-NEXT:  .LBB9_9: ; %entry
; CHECK-NEXT:    lda mos8(__rc2)
; CHECK-NEXT:    sec
; CHECK-NEXT:    sbc mos8(__rc4)
; CHECK-NEXT:    lda #1
; CHECK-NEXT:    bcs .LBB9_11
; CHECK-NEXT:  ; %bb.10: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:  .LBB9_11: ; %entry
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    beq .LBB9_13
; CHECK-NEXT:  ; %bb.12: ; %entry
; CHECK-NEXT:    lda #0
; CHECK-NEXT:    jmp .LBB9_14
; CHECK-NEXT:  .LBB9_13: ; %entry
; CHECK-NEXT:    lda #1
; CHECK-NEXT:  .LBB9_14: ; %entry
; CHECK-NEXT:    ldx #1
; CHECK-NEXT:    cmp #0
; CHECK-NEXT:    bne .LBB9_16
; CHECK-NEXT:  ; %bb.15: ; %entry
; CHECK-NEXT:    ldx #0
; CHECK-NEXT:  .LBB9_16: ; %entry
; CHECK-NEXT:    txa
; CHECK-NEXT:    rts
entry:
  %cmp = icmp sgt i16 %a, %b
  ret i1 %cmp
}
