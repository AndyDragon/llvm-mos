# RUN: llc -mtriple=mos -run-pass=instruction-select -verify-machineinstrs -o - %s | FileCheck %s
--- |
  @.str = constant [1 x i8] c"X"
  define void @addrstk_fixed() norecurse {
    entry:
      ret void
  }
  define void @addrstk_local() {
    entry:
      ret void
  }
  define void @ldimm_local() norecurse {
    entry:
      ret void
  }
  define void @ldimm_global() {
    entry:
      ret void
  }
  define void @load_indexed() {
    entry:
      ret void
  }
  define void @store_indexed() {
    entry:
      ret void
  }
---
name: addrstk_fixed
# CHECK-LABEL: name: addrstk_fixed
legalized: true
regBankSelected: true
fixedStack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    %0:any(p0) = G_FRAME_INDEX %fixed-stack.0
    RTS implicit %0
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
# CHECK:      %1:anyi8, %2:cc, %3:vc = AddrLostk %fixed-stack.0, 0, implicit-def $nz
# CHECK-NEXT: %4:anyi8, %5:cc, %6:vc = AddrHistk %fixed-stack.0, 0, %2, implicit-def $nz
# CHECK-NEXT: %0:imag16 = REG_SEQUENCE %1, %subreg.sublo, %4, %subreg.subhi
...
---
name: addrstk_local
# CHECK-LABEL: name: addrstk_local
legalized: true
regBankSelected: true
stack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    %0:any(p0) = G_FRAME_INDEX %stack.0
    RTS implicit %0
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
# CHECK:      %1:anyi8, %2:cc, %3:vc = AddrLostk %stack.0, 0, implicit-def $nz
# CHECK-NEXT: %4:anyi8, %5:cc, %6:vc = AddrHistk %stack.0, 0, %2, implicit-def $nz
# CHECK-NEXT: %0:imag16 = REG_SEQUENCE %1, %subreg.sublo, %4, %subreg.subhi
...
---
name: ldimm_local
# CHECK-LABEL: name: ldimm_local
legalized: true
regBankSelected: true
stack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    %0:any(p0) = G_FRAME_INDEX %stack.0
    RTS implicit %0
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
# CHECK:      %1:gpr = LDimm %stack.0
# CHECK-NEXT: %2:gpr = LDimm %stack.0
# CHECK-NEXT: %0:imag16 = REG_SEQUENCE %1, %subreg.sublo, %2, %subreg.subhi
...
---
name: ldimm_global
# CHECK-LABEL: name: ldimm_global
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:any(p0) = G_GLOBAL_VALUE @.str
    RTS implicit %0
# CHECK:      %1:gpr = LDimm target-flags(lo) @.str
# CHECK-NEXT: %2:gpr = LDimm target-flags(hi) @.str
# CHECK-NEXT: %0:imag16 = REG_SEQUENCE %1, %subreg.sublo, %2, %subreg.subhi
...
---
name: load_indexed
# CHECK-LABEL: name: load_indexed
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:any(p0) = G_GLOBAL_VALUE @.str
    %1:any(s8) = G_IMPLICIT_DEF
    %2:any(p0) = G_PTR_ADD %0, %1
    %3:any(s8) = G_LOAD %2 :: (load 1)
    RTS implicit %3
# CHECK:      %1:xy = IMPLICIT_DEF
# CHECK-NEXT: %3:gpr = LDidx @.str, %1
# CHECK-NEXT: RTS implicit %3
...
---
name: store_indexed
# CHECK-LABEL: name: store_indexed
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    %0:any(s8) = G_IMPLICIT_DEF
    %1:any(p0) = G_GLOBAL_VALUE @.str
    %2:any(s8) = G_IMPLICIT_DEF
    %3:any(p0) = G_PTR_ADD %1, %2
    G_STORE %0, %3 :: (store 1)
    RTS
# CHECK:      %0:ac = IMPLICIT_DEF
# CHECK-NEXT: %2:xy = IMPLICIT_DEF
# CHECK-NEXT: STidx %0, @.str, %2
# CHECK-NEXT: RTS
...
