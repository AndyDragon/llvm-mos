# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=mos -run-pass=instruction-select -verify-machineinstrs -o - %s | FileCheck %s
--- |
  @.str = constant [1 x i8] c"X"
  define void @addrstk_fixed() norecurse {
    entry:
      ret void
  }
  define void @addrstk_local() {
    entry:
      ret void
  }
  define void @ldimm_local() norecurse {
    entry:
      ret void
  }
  define void @ldimm_global() {
    entry:
      ret void
  }
  define void @ldimm_global_offset() {
    entry:
      ret void
  }
  define void @load_absolute_gv() {
    entry:
      ret void
  }
  define void @load_indexed() {
    entry:
      ret void
  }
  define void @store_indexed() {
    entry:
      ret void
  }
---
name: addrstk_fixed
legalized: true
regBankSelected: true
fixedStack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: addrstk_fixed
    ; CHECK: [[AddrLostk:%[0-9]+]]:anyi8, [[AddrLostk1:%[0-9]+]]:cc, [[AddrLostk2:%[0-9]+]]:vc = AddrLostk %fixed-stack.0, 0
    ; CHECK-NEXT: [[AddrHistk:%[0-9]+]]:anyi8, [[AddrHistk1:%[0-9]+]]:cc, [[AddrHistk2:%[0-9]+]]:vc = AddrHistk %fixed-stack.0, 0, [[AddrLostk1]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[AddrLostk]], %subreg.sublo, [[AddrHistk]], %subreg.subhi
    ; CHECK-NEXT: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_FRAME_INDEX %fixed-stack.0
    RTS implicit %0
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
...
---
name: addrstk_local
legalized: true
regBankSelected: true
stack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: addrstk_local
    ; CHECK: [[AddrLostk:%[0-9]+]]:anyi8, [[AddrLostk1:%[0-9]+]]:cc, [[AddrLostk2:%[0-9]+]]:vc = AddrLostk %stack.0, 0
    ; CHECK-NEXT: [[AddrHistk:%[0-9]+]]:anyi8, [[AddrHistk1:%[0-9]+]]:cc, [[AddrHistk2:%[0-9]+]]:vc = AddrHistk %stack.0, 0, [[AddrLostk1]]
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[AddrLostk]], %subreg.sublo, [[AddrHistk]], %subreg.subhi
    ; CHECK-NEXT: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_FRAME_INDEX %stack.0
    RTS implicit %0
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
...
---
name: ldimm_local
legalized: true
regBankSelected: true
stack:
  - { id: 0, size: 1 }
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ldimm_local
    ; CHECK: [[LDImm:%[0-9]+]]:gpr = LDImm %stack.0
    ; CHECK-NEXT: [[LDImm1:%[0-9]+]]:gpr = LDImm %stack.0
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; CHECK-NEXT: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_FRAME_INDEX %stack.0
    RTS implicit %0
# Note: The HI and LO target operands are present on the frame index, but LLVM doesn't print them.
...
---
name: ldimm_global
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ldimm_global
    ; CHECK: [[LDImm:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str
    ; CHECK-NEXT: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; CHECK-NEXT: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_GLOBAL_VALUE @.str
    RTS implicit %0
...
---
name: ldimm_global_offset
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: ldimm_global_offset
    ; CHECK: [[LDImm:%[0-9]+]]:gpr = LDImm target-flags(lo) @.str + 1234
    ; CHECK-NEXT: [[LDImm1:%[0-9]+]]:gpr = LDImm target-flags(hi) @.str + 1234
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:imag16 = REG_SEQUENCE [[LDImm]], %subreg.sublo, [[LDImm1]], %subreg.subhi
    ; CHECK-NEXT: RTS implicit [[REG_SEQUENCE]]
    %0:any(p0) = G_GLOBAL_VALUE @.str + 1234
    RTS implicit %0
...
---
name: load_absolute_gv
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_absolute_gv
    ; CHECK: [[LDAbs:%[0-9]+]]:gpr = LDAbs @.str :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LDAbs]]
    %0:any(s8) = G_LOAD_ABS @.str :: (load (s8))
    RTS implicit %0
...
---
name: load_indexed
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: load_indexed
    ; CHECK: [[COPY:%[0-9]+]]:xy = COPY $a
    ; CHECK-NEXT: [[LDIdx:%[0-9]+]]:gpr = LDIdx @.str, [[COPY]] :: (load (s8))
    ; CHECK-NEXT: RTS implicit [[LDIdx]]
    %0:any(s8) = COPY $a
    %1:any(s8) = G_LOAD_ABS_IDX @.str, %0 :: (load (s8))
    RTS implicit %1
...
---
name: store_indexed
legalized: true
regBankSelected: true
body: |
  bb.0.entry:
    ; CHECK-LABEL: name: store_indexed
    ; CHECK: [[COPY:%[0-9]+]]:ac = COPY $x
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:xy = COPY $a
    ; CHECK-NEXT: STIdx [[COPY]], @.str, [[COPY1]] :: (store (s8))
    ; CHECK-NEXT: RTS
    %0:any(s8) = COPY $x
    %1:any(s8) = COPY $a
    G_STORE_ABS_IDX %0, @.str, %1 :: (store (s8))
    RTS
...
